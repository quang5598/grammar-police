{"version":3,"sources":["Components/image1.jpg","Components/image2.jpg","icon.png","Components/Footer/Footer.js","Components/TextBox/TextBox.js","Components/HasError/HasError.js","Components/ErrorList/ErrorList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","className","style","paddingBottom","padding","fontWeight","textAlign","paddingLeft","textIndent","color","textDecoration","href","target","fontSize","paddingRight","TextBox","handleTextEvent","text","errorList","textfield","onInput","Grid","container","justify","wrap","xs","rows","cols","maxlength","float","resize","border","width","height","letterSpacing","fontFamily","lineHeight","onChange","defaultValue","Hidden","mdDown","src","image1","alt","HasError","word","message","replacements","rule","description","error","test","addNewText","offset","length","React","useState","open","setOpen","handleClose","newReplacements","split","map","replace","display","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","fontStyle","replacement","Button","margin","backgroundColor","variant","handleReplacement","parseInt","DialogActions","ErrorList","this","props","newArray","errorPosition","count","matches","push","array","index","character","value","JSON","stringify","substr","splice","issueType","data","join","Object","entries","parse","domNode","attribs","name","createElement","image2","Component","App","state","textBox","event","setState","fetchAPI","fetch","method","headers","body","then","response","json","newText","handleButtonInput","handleButtonSubmit","isLoading","icon","Tooltip","title","marginRight","startIcon","visibility","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41e6a256.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image1.28686cfa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image2.091a1830.jpg\";","module.exports = __webpack_public_path__ + \"static/media/icon.69ddbe02.png\";","import React from 'react';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\n\r\nconst Footer = ()=>{\r\n\treturn(\r\n\t\t<div className='br--left shadow-5 code white bold' style={{ paddingBottom:'20px'\r\n\t\t}}>\r\n\t\t<p className='ttu' style={{padding:'30px', fontWeight:'1000'}}>\r\n        About the project\r\n      </p>\r\n      <div style={{fontWeight:'500',textAlign:'left',paddingLeft:'10px'}} className='white'>\r\n      <p style={{textIndent:'30px'}}>\r\n        Whether your English is a second language or a native language, you will always \r\n        make grammatical mistakes (Especially me!!!). But don't worry, Winnie-the-Police \r\n        has a duty to find any grammatical errors for you.\r\n     </p>\r\n     <p style={{textIndent:'30px'}}>\r\n     The Grammar Police project uses the Grammar Bot API to check user text and find \r\n     any grammatical errors. The technology used in this project is React \r\n     as a front-end to transfer and receive data from the back-end server. Express.js \r\n     (node.js) is used as back-end to receive and return data to the front-end.</p>\r\n      </div>\r\n\t\t<div>\r\n\t\t<a style={{color:'inherit',textDecoration: 'none'}} \r\n\t\thref='https://github.com/quang5598'\r\n\t\ttarget=\"_blank\">\r\n\t\t<GitHubIcon fontSize='large' className='grow pointer' \r\n\t\tstyle={{paddingRight:'30px'}} /></a>\r\n\t\t<a style={{color:'inherit',textDecoration: 'none'}} \r\n\t\thref='https://www.linkedin.com/in/quang-nguyen-730b28195'\r\n\t\ttarget=\"_blank\">\r\n\t\t<LinkedInIcon fontSize='large' className='grow pointer' href='' />\r\n\t\t</a></div>\r\n\r\n\r\n\t\t</div>\r\n\t\t); // end return\r\n}\r\n\r\nexport default Footer;","/*\r\n\tAuthor: Quang Nguyen\r\n\tPurpose: TextBok component will display the text field and get the user input.\r\n*/\r\n\r\nimport React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport image1 from '../image1.jpg'\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport './TextBox.css'\r\n\tconst TextBox = ({handleTextEvent, errorList,textfield,text,onInput}) => {\r\n\t\treturn(\r\n\t\t<div className='ba '>\r\n\t\t<Grid container justify='center' wrap='wrap' >\r\n\t\t\r\n\t\t{\r\n\t\t\t// Display input mode if onInput is true\r\n\t\t\tonInput?\r\n\t\t\t<Grid xs={8} >\r\n\t\t\t<textarea  rows=\"4\" cols=\"50\" maxlength=\"50000\"\r\n\t\tstyle={{ float:'left',resize:'none',border: 'none',width:'100%', height:'295px'\r\n\t\t\t\t,fontSize: '18px', letterSpacing: '1px',\r\n\t\t\t\tfontFamily: 'Times New Roman, Times, serif',lineHeight:'1.6'}}\r\n\t\t\t\tonChange ={handleTextEvent}\r\n\t\t\t\tclassName=''\r\n\t\t\t\tdefaultValue ={text}\r\n\t\t\t\t>\r\n\t\t</textarea>\r\n\t\t</Grid>\r\n\t\t: // Otherwise, disable input mode\r\n\t\t<Grid xs={8} >\r\n\t\t<div  className='textarea1'>{text}</div></Grid>\r\n\t\t}\r\n\t\t\r\n\t\t<Hidden mdDown>\r\n\t<Grid xs={4}> \r\n\t<img src={image1} alt='' width='450px' height='300px'\r\n\tstyle={{float:'right',paddingLeft:'5px'}}/> \r\n\t</Grid>\r\n\t</Hidden>\r\n\t\r\n\r\n\t\t</Grid>\r\n        </div>\r\n        );\r\n}\r\n\r\n\r\nexport default TextBox;\r\n\r\n\r\n/*\r\n\r\n\t<TextareaAutosize style={{width: '100%',fontSize: '18px',\r\n\t\t\t\t\t\t\tfontFamily: 'Times New Roman, Times, serif',\r\n\t\t\t\t\t\t\tletterSpacing: '1px', marginLeft:'30px'}} \r\n\t\t rowsMin={10}\r\n\t\t rowsMax={10}\r\n\t\t placeholder=\"Minimum 3 rows\" \r\n\t\tdefaultValue= {textfield}\r\n\t\tonChange ={handleTextEvent}/>\r\n\r\n*/","/*\r\n\tAuthor: Quang Nguyen\r\n\tPurpose: HasError component will receive the props that are passed \r\n\t\t\t from ErrorList component.\r\n*/\r\n\r\nimport React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport './HasError.css'\r\n\r\nconst HasError = ({word,message,replacements,rule,error,test,description,addNewText, offset, length}) => {\r\n\tconst [open, setOpen] = React.useState(false);\r\n  \tconst handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  \tconst handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // this function will pass the replacement text that the user has selected to root component\r\n  const handleReplacement = (text,offset,length) =>{\r\n  \taddNewText(text,offset,length);\r\n  \thandleClose();\r\n  }\r\n  let array = replacements.split(',')\r\n  let newReplacements  = array.map(replace => {\r\n  \treturn replace.replace(/[^a-zA-Z ''?]/g, \"\");\r\n  })\r\n\r\n  \treturn (<div style={{display:'inline'}} >\r\n\t\t<span className= 'error'\r\n\t\t\tonClick={handleClickOpen}>{word}</span>\r\n\t\t\t\r\n\t\t<Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        style={{fontSize: '18px'}}\r\n      >\r\n        <DialogTitle style={{color:'red'}} id=\"alert-dialog-title\">{`Error Type: ${rule}`}</DialogTitle>\r\n        <DialogContent>\r\n          \r\n          <DialogContentText  id=\"alert-dialog-description\">\r\n            {message}\r\n          </DialogContentText>\r\n          <DialogContentText style={{fontStyle:'italic'}} id=\"alert-dialog-description\">\r\n            <span style={{fontStyle:'bold'}}>Tip: </span>{description}\r\n          </DialogContentText>\r\n          <DialogContentText  id=\"alert-dialog-description\">\r\n          {\r\n          \tnewReplacements.map(replacement => {\r\n          \t\treturn (\r\n          \t\t<Button style={{margin:'5px', backgroundColor:'#90EE90', color:'black'}} \r\n            \t\t\tvariant=\"contained\" color=\"primary\"\r\n            \t\t\tonClick ={() => handleReplacement(replacement,\r\n            \t\t\t parseInt(offset),parseInt(length))}>{replacement}\r\n            \t\t\t</Button>);\r\n\t          \t})\r\n\t          }\r\n\t         \t\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n\t\t\r\n\t</div>);\r\n\r\n}\r\n\r\n\r\nexport default HasError;","/*\r\n\tAuthor: Quang Nguyen\r\n\tPurpose: Since React component doesn't render string content, The use of\r\n\t dangerouslySetInnerHTML is needed to convert the textfield input\r\n\tto React Component\r\n\r\n*/\r\nimport React from 'react';\r\nimport './ErrorList.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport image2 from '../image2.jpg'\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport HasError from '../HasError/HasError';\r\nimport parse from 'html-react-parser';\r\n\r\n\r\nclass ErrorList extends React.Component{\r\n\r\n  \r\n\trender(){\r\n\tconst {errorList,text,addNewText} = this.props;\r\n\tlet newArray = text.split(''); // convert each character from the string to an array\r\n\tlet errorPosition = []; \r\n\tlet count =0;\r\n\r\n\t\t// If there's a error, push the offset and length from errorList\r\n\t\t// to errorPosition array\r\n\t\tif(errorList.matches){\r\n\r\n\t\terrorList.matches.map((error,id) => {\r\n\t\t\terrorPosition.push([error.offset,error.length])\r\n\t\t})\r\n\t\t}\r\n\r\n\t\t// For each error, add <span> element to that error \r\n\t\terrorPosition.map((array,index) => {\r\n\t\tnewArray.map((character,id) => {\r\n\t\t\tif(id === array[0]){\r\n\t\t\t\r\n\t\t\tcount++;\r\n\t\t\tlet replacements = errorList.matches[index].replacements.map(replace =>{\r\n\t\t\t\treturn replace.value\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tnewArray[id] = `<span \r\n\t\t\tid=${index}\r\n\t\t\terror=${JSON.stringify(errorList.matches[index])}\r\n\t\t\tword=${text.substr(array[0],array[1])}\r\n\t\t\tmessage=${JSON.stringify(errorList.matches[index].message.replace(/[^a-zA-Z .,?''/]/g, \"\"))}\r\n\t\t\treplacements=${JSON.stringify(replacements.splice(0,5))}\r\n\t\t\trule=${JSON.stringify(errorList.matches[index].rule.issueType)}\r\n\t\t\tdescription =${JSON.stringify(errorList.matches[index].rule.description)}\r\n\t\t\toffset= ${JSON.stringify(array[0])}\r\n\t\t\tlength= ${JSON.stringify(array[1])}>${newArray[id]}`\r\n\t\t\t\r\n\t\t\tnewArray[array[0]+array[1]-1]= `${newArray[array[0]+array[1]-1]}</span>`;\r\n\t\t} \r\n\t\t})\r\n\t})\t\r\n\t\t// join newArray array and covert it to string\r\n\t\tconst data = newArray.join(\"\")\r\n\treturn(\r\n\r\n\t\t<div className='ba b--black-30'>\r\n\t\t<Grid container justify='center' wrap='wrap' >\r\n\t\t<Grid xs={8} >\r\n\t\t{ \r\n\t\t// check if the text input is not empty\r\n\t\ttext.length >0? \r\n\t\t\t// check if we receive any error, if not, no grammatical errors has been found\r\n\t\t\tObject.entries(errorList).length ===0||count===0 ? \r\n\t\t\t<div className ='textarea burn'>{text}</div>\r\n\t\t\t:\r\n\t\t\t// if we receive with an error, display the list of error.\r\n\t\t\t<div className='textarea'>\r\n\r\n\t\t\t{\r\n\t\t\t\t// using dangerouslySetInnerHTML to convert data string to React component\r\n\t\t\t\tparse(data, {\r\n\t\t\t  replace: domNode => {\r\n\t\t\t    if (domNode.attribs && domNode.name === 'span') {\r\n\t\t\t    return React.createElement('span', {}, \r\n\t\t\t    <HasError \r\n\t\t\t    error={domNode.attribs.error}\r\n\t\t\t    word={domNode.attribs.word}\r\n\t\t\t    message = {domNode.attribs.message} \r\n\t\t\t    replacements={domNode.attribs.replacements}\r\n\t\t\t    rule={domNode.attribs.rule}\r\n\t\t\t    description={domNode.attribs.description}\r\n\t\t\t    addNewText={addNewText}\r\n\t\t\t    offset = {domNode.attribs.offset}\r\n\t\t\t    length = {domNode.attribs.length}/>);\r\n\t\t\t    }\r\n\t\t  }\r\n\t\t})\r\n\t}\r\n\t\t\t</div>\r\n\t\t// Display empty div field if the input field is empty\r\n\t\t:\r\n\t\t<div className='textarea'></div>\r\n\t\t\t}\r\n\t\t</Grid>\r\n\t\t<Hidden mdDown>\r\n\t<Grid xs={4}> \r\n\t<img src={image2} alt='' width='450px' height='300px'\r\n\tstyle={{float:'right',paddingLeft:'5px'}}/> \r\n\t</Grid>\r\n\t</Hidden>\r\n\t\t</Grid>\r\n        </div>\r\n\t\t);\r\n\r\n\t}\r\n}\r\n\r\n\r\nexport default ErrorList;\r\n","import React from 'react';\nimport './App.css';\nimport Footer from './Components/Footer/Footer';\nimport TextBox from './Components/TextBox/TextBox';\nimport ErrorList from './Components/ErrorList/ErrorList';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport icon from './icon.png';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      textfield: '', \n      text:'',\n      errorList: {},\n      onInput: true,\n      isLoading: true,\n    }\n  }\n\n// Display ErrorList component  \nerrorList = () => {\n  return (\n    <ErrorList textfield={this.state.textfield}\n      errorList ={this.state.errorList}\n       text={this.state.text} addNewText={this.addNewText}\n       />\n    );\n}\n\n// Display TextBox component\ntextBox = () => {\n  return (  \n    <TextBox  handleTextEvent = {this.handleTextEvent}\n       errorList={this.state.errorList} textfield={this.state.textfield}\n       text={this.state.text} onInput= {this.state.onInput}/> \n      );\n    }\n\n  handleTextEvent = (event) => {\n    this.setState({textfield: event.target.value});\n  }\n  fetchAPI = (text) => {\n   return ( fetch('https://pure-ravine-07571.herokuapp.com/geterror' , {\n      method:'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        text: text,\n      })\n    }).then(response => response.json()));\n  }\n\n\n  addNewText = (text,offset,length)=>{\n    let newText  = this.state.text.substr(0,offset)  +text + \n    this.state.text.substr(offset + length);\n    this.fetchAPI(newText).then(errorList => {\n        \n        if(errorList){\n          this.setState({errorList: errorList,text:newText, textfield: newText})\n        }\n      })\n  }\n  // Change to input mode when Input button is clicked \n  handleButtonInput = () => {\n    this.setState({onInput: true}) \n  }\n  // send data to the back-end server and then get the response from the grammarbot APi\n  handleButtonSubmit = () => {\n    this.setState({isLoading: true})\n      this.fetchAPI(this.state.textfield).then(errorList => {\n      // Check if the server response with data\n        if(errorList){\n          if(errorList.matches.length>0){\n\n          this.setState({errorList: errorList,\n                        text:this.state.textfield, \n                        onInput: false,isLoading: false})\n      } else {\n        this.setState({onInput: true, text: this.state.textfield})\n      }\n        } \n      })\n  }\n  render(){\n  return (\n    <div className=\"App\">{\n    this.state.test}\n    <Grid container >\n    <Grid xs={12}>\n    <img src={icon} alt='' width='300px' height='300px'/>\n    </Grid>\n\n  <Grid xs={1}></Grid>\n \n  <Grid xs={9}>\n  {\n    this.state.onInput?\n      <div className='wrapper main'>\n      {this.textBox()}\n       </div>\n       :\n       <div className='wrapper main2'>\n      {this.textBox()}\n       </div>\n\n      }\n\n      <div className='wrapper main'>\n      <div style={{float:'left', fontStyle:'italic'}}>\n       {this.state.textfield.length}/50000</div>\n       <Tooltip title=\"Grammar Check\">\n       <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        style={{marginRight:'10px'}}\n        onClick= {this.handleButtonSubmit}\n        startIcon={<ArrowDownwardIcon style={{ fontSize:'2em' }}/>}\n      >Check</Button></Tooltip>\n      <Tooltip title=\"Back To Text Field\">\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={this.handleButtonInput}\n        startIcon={<ArrowUpwardIcon style={{ fontSize:'2em' }}/>}\n      >Input</Button></Tooltip>\n    {\n        this.state.errorList.matches ? \n        this.state.errorList.matches.length !==0?\n        <div className = 'alert' >\n\n     Errors Found: <span style={{color:'red'}}>{this.state.errorList.matches.length}</span>\n      </div>\n      :\n      <div className = 'alert' >\n\n     <CheckIcon style={{color:'green'}} fontSize='inherit'/> \n     <span style={{color:'green'}}>Perfect</span>\n      </div>\n      :\n      <div className='alert' style={{visibility:'hidden'}} >\n     No Errors Found\n      </div>\n      }\n      </div>\n\n  \n      </Grid>\n\n  <Grid xs={1}> </Grid>\n\n        <Grid xs={1}></Grid>\n        <Grid xs={1}></Grid>\n\n      <Grid xs={9}>\n      \n      {\n        this.state.onInput?\n        \n        <div className='wrapper main2'>\n        \n        {this.errorList()}\n\n        </div>\n        :\n        <div className='wrapper main'>\n        {this.errorList()}\n        </div>\n      }\n\n       </Grid>\n         <Grid xs={1}></Grid>\n\n      </Grid>\n            <div style={{height:'150px'}}></div>\n      <div style={{ backgroundColor:'#021b79'}}>\n      <Footer /></div>\n      \n    </div>\n  );\n} // end render\n} // end class\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}